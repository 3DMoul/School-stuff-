#include <iostream>
#include <vector>
#include <string>
#include <list>
#include <cstring>
#include <limits>
#include <ctime>

int main()
{
    bool run = true;
    time_t timestamp;
    time(&timestamp);




    std::list<std::vector<std::string>> ListVal = {};

    //menyn
    while (run == true)
    {

        int Choice;





        std::cout << "---------------------------------" << std::endl;
        std::cout << "Datainsamlare och analysverktyg för mätvärden" << std::endl;
        std::cout << "[1] Input more more data" << std::endl;
        std::cout << "[2] Print all data" << std::endl;
        std::cout << "[3] More options for data" << std::endl;
        std::cout << "[4]" << std::endl;
        std::cout << "[5]" << std::endl;
        std::cout << "[6] End Program" << std::endl;
        /*std::cout << "[7]" << std::endl;
        std::cout << "[8]" << std::endl;
        std::cout << "[9]" << std::endl;
        std::cout << "[10]" << std::endl;*/
        std::cout << "---------------------------------" << std::endl;




        while (!(std::cin >> Choice))
        {
            std::cout << "Error you have inputed a invalid value please input one of the meny options: " << std::endl;
            std::cin.clear();
            std::cin.ignore(10000, '\n');
        }

        switch (Choice)
        {
         case 1:

         {

            std::cout << "How many values do you want to add" << std::endl;
            int Times = 0;
            std::cin >> Times;
            for (int i = 0; i < Times; i++)
            {
                //vector för värdet med storlek (3) så jag kan ha tid när den skapades nummer# vilken årdning den skapades och till sist valuen av datan
                std::vector<std::string> Values(3);

                std::cout << "[" << i + 1 << "]" << "Value: ";

                double SubVal = 0;
                std::cin >> SubVal;
                
                //här är för att lägga till tiden
                time_t timestamp;
                time(&timestamp);

                Values[0] = ctime(&timestamp);


                std::string tempstring = std::to_string(SubVal);
                Values[1] = tempstring;


                //detta är för att ge nummeret på vilken värde det är
                std::string convert = std::to_string((size(ListVal) + 1));
                std::string Datanumb = convert + "#";

                std::cout << Datanumb<< std::endl;
                Values[2] = Datanumb;

                ListVal.push_back(Values);

            }

         }


         break;

         case 2:
            
         {
            bool Print = true;
            
            

            while(Print == true)
            {

                std::cout << "You have [" << size(ListVal) << "]" << std::endl;
                std::cout << "Do you want to list them [Y/N] : " << std::endl;
                char Des;
                std::cin >> Des;
                //använder toupper så man kan skriva bådde stor eller liten bokstav

                if ((char)toupper(Des) == 'Y')
                {

                    
                    //detta går igenom alla vectorer och skriver ut dem
                    for (const auto& vec : ListVal)
                    {
                        
                        std::cout << "--------------------" << std::endl;
                        
                            std::cout << vec[0] << std::endl;
                            std::cout << vec[2] << std::endl;
                            std::cout << vec[1] << std::endl;

                        std::cout << "--------------------" << std::endl;
                        
                    }

                    Print = false;

                }
                else if ((char)toupper(Des) == 'N')
                {

                    Print = false;

                }
                else
                {

                    std::cout << "Wrong input" << std::endl;

                }

                break;

            }

         }

         break;

         case 3:
         {
            //if else beroende på om du har en value eller flera values
            if (size(ListVal) == 1)
            {

                std::cout << "You have " << size(ListVal) << " value" << std::endl;
                double SumVal = 0;
                for (const auto& VecVal : ListVal)
                {

                    double temp = stod(VecVal[1]);
                    SumVal = SumVal + temp;


                }

                std::cout << "The only value is " << SumVal << std::endl;

            }

            else if (size(ListVal) > 1)
            {

                std::cout << "You have " << size(ListVal) << " values" << std::endl;

                //här är summan av all values
                double SumVal = 0;
                for (const auto& VecVal : ListVal)
                {

                    double temp = stod(VecVal[1]);
                    SumVal = SumVal + temp;

                }

                std::cout << "The sum of all the values is " << SumVal << std::endl;

                // medelvärdet är summan av alla delat på hur många values du har
                std::cout << "Avarage of all values " << SumVal / size(ListVal) << std::endl;

                // här får jag maximum valuen och minimum valuen så att koden har en refrence att comparea mot
                double MinVal = std::numeric_limits<double>::max();
                double MaxVal = std::numeric_limits<double>::min();

                for (const auto& VecVal : ListVal)//checkar genom listan alla vectorer
                {
                    double temp = stod(VecVal[1]);
                    //gör [1] för att det är på den indexen som data valuen är på
                    if (temp > MaxVal)
                    {

                        MaxVal = temp;

                    }
                    else if (temp < MinVal)
                    {

                        MinVal = temp;

                    }

                }

                std::cout << "Min: " << MinVal << std::endl;

                std::cout << "Max: " << MaxVal << std::endl;

                double StandAvg = 0;
                for (const auto& VecVal : ListVal)
                {

                    double temp = stod(VecVal[1]);
                    StandAvg = StandAvg + temp;

                }
                StandAvg = StandAvg / size(ListVal);

                //vector för att hålla värderna för varians
                std::vector<double> StandAv = {};

                //detta subtraherar alla värderna med medelvärdet
                for (const auto& VecVal : ListVal)  
                {
                    double temp = stod(VecVal[1]);
                    double tempvar = temp - StandAvg;
                        
                    StandAv.push_back(tempvar);
                    
                }

                //detta kvadrerar alla dem subtraherade nummrena
                for (int i = 0; i< size(StandAv); i++)
                {

                    double tempvar = pow(StandAv[i], 2);

                    StandAv[i] = tempvar;
                   
                }

                // deklarering a kvadrerade tal
                double Kvad = 0;

                //loop för att addera ihop all Kvad tal
                for (double i : StandAv)
                {

                    Kvad = Kvad + i;

                }

                

                std::cout << "the varians is " << Kvad / (size(StandAv) - 1) << std::endl;

                std::cout << "the varians is " << Kvad / size(StandAv) << std::endl;

            }
            //detta kommer upp om du inte har några values fast försöker printa ut en lista endå
            else
            {

                std::cout << "You currently dont have any data values to look at" << std::endl;

            }

         }

         

         break;


         case 4:

            std::cout << "test" << std::endl;

            break;


         case 5:

            std::cout << "test" << std::endl;

            break;

            

         case 6: //stänger av loopen

            run = false;

            break;

         default: //om du skriver ett nummer som inte är en av alternativen

            std::cout << "Wrong input choices are between [1]-[6]" << std::endl;

            break;

            


        }

        

    }

        std::cout << "Klick \"ENTER\" too continue" << std::endl;
        std::string str;
        std::getline(std::cin, str);

        return 0;
}
