#include <iostream>
#include <vector>
#include <string>
#include <list>
#include <cstring>
#include <limits>
#include <ctime>
#include < cstdlib >




    void PrintMenu()
    {
        std::cout << "---------------------------------" << std::endl;
        std::cout << "Datainsamlare och analysverktyg för mätvärden" << std::endl;
        std::cout << "[1] Input more more data" << std::endl;
        std::cout << "[2] Print all data" << std::endl;
        std::cout << "[3] More options for data" << std::endl;
        std::cout << "[4] Simulate Random values" << std::endl;
        std::cout << "[5]" << std::endl;
        std::cout << "[6] End Program" << std::endl;
        /*std::cout << "[7]" << std::endl;
        std::cout << "[8]" << std::endl;
        std::cout << "[9]" << std::endl;
        std::cout << "[10]" << std::endl;*/
        std::cout << "---------------------------------" << std::endl;
    }

    void ENTER()
    {

        std::cout << "Klick \"ENTER\" too continue" << std::endl;

        std::string str;

        std::getline(std::cin, str);

        std::streamsize InputBufferLimit = 10000;

        std::cin.ignore(InputBufferLimit, '\n');
    }

    static double SummOfList(const std::list<std::vector<std::string>>& InputList)
    {
        double SumVal = 0;

        for (const auto& VecVal : InputList)
        {

            double temp = stod(VecVal[1]);

            SumVal = SumVal + temp;

        }

        return SumVal;

    }

    static double Varia(const std::list<std::vector<std::string>>& InputList)
    {


        //vector för att hålla värderna för varians
        std::vector<double> StandardDeviation = {};

        double StandAvg = SummOfList(InputList);

        StandAvg = StandAvg / size(InputList);
        //detta subtraherar alla värderna med medelvärdet
        for (const auto& VecVal : InputList)
        {
            double temp = stod(VecVal[1]);
            double tempvar = temp - StandAvg;

            StandardDeviation.push_back(tempvar);

        }

        //detta kvadrerar alla dem subtraherade nummrena
        for (int i = 0; i < size(StandardDeviation); i++)
        {

            double tempvar = pow(StandardDeviation[i], 2);

            StandardDeviation[i] = tempvar;

        }

        // deklarering a kvadrerade tal
        double Kvad = 0;

        //loop för att addera ihop all Kvad tal
        for (double i : StandardDeviation)
        {

            Kvad = Kvad + i;

        }

        return Kvad;

    }

    static int NumberChoice(std::string StringInput)
    {

        int Choice;

        //failsafe loop för val
        while (!(std::cin >> Choice))
        {
        
            std::cout << "Error you have inputed a invalid value please input a number:  " << std::endl;
            std::cin.clear();
            std::streamsize InputBufferLimit = 10000;
            std::cin.ignore(InputBufferLimit, '\n');
            std::cout << StringInput << std::endl;

        }


        return Choice;
    }


int main()
{

    

    bool run = true;

    //här deklarerar jag tiden
    time_t timestamp;
    time(&timestamp);

    
    std::list<std::vector<std::string>> DataEntries = {};


    //menyn loop
    
    while (run == true)
    {

        

        //tar bort det som är skrivet innan
        system("CLS");

        //meny
        PrintMenu();
        
        std::string MenyChoice = "Choice 1-6: ";
        std::cout << MenyChoice << std::endl;
        //menyval NumberChoice(); funktionen är en fail safe ifal man skiver en bokstav istället för ett nummer
        int Choice = NumberChoice(MenyChoice);
        

        switch (Choice)
        {

         case 1:
         {

             system("CLS");

             std::string TimesChoice = "How many values do you want to add";
             std::cout << TimesChoice << std::endl;
            
             int Times = NumberChoice(TimesChoice);
            
            
            for (int i = 0; i < Times; i++)
            {

                //vector för värdet med storlek (3) så jag kan ha tid när den skapades nummer# vilken årdning den skapades och till sist valuen av datan
                std::vector<std::string> Values(3);

                std::cout << "[" << i + 1 << "]" << "Value: ";

                //här är för att lägga till tiden
                time_t TimeStamp;
                time(&TimeStamp);
                Values[0] = ctime(&TimeStamp);


                //detta är för att ge nummeret på vilken värde det är
                std::string convert = std::to_string((size(DataEntries) + 1));
                std::string dataLabel = convert + "#";
                std::cout << dataLabel << std::endl;
                Values[2] = dataLabel;


                double InputValue = 0;
                std::cin >> InputValue;
                std::string TempString = std::to_string(InputValue);
                Values[1] = TempString;
                
                DataEntries.push_back(Values);

            }

         }

         break;


         case 2:
         {

             system("CLS");
        
            bool Print = true;


            while (Print == true)
            {

                std::cout << "You have [" << size(DataEntries) << "]" << std::endl;
                std::cout << "Do you want to list them [Y/N] : " << std::endl;
                char Des;
                std::cin >> Des;
                
                //använder toupper så man kan skriva bådde stor eller liten bokstav
                if ((char)toupper(Des) == 'Y')
                {


                
                    //detta går igenom alla vectorer och skriver ut dem
                    
                    for (const auto& vec : DataEntries)
                    {

                    
                        std::cout << "--------------------" << std::endl;

                        
                        std::cout << vec[0] << std::endl;
                        
                        std::cout << vec[2] << std::endl;
                        
                        std::cout << vec[1] << std::endl;

                        
                        std::cout << "--------------------" << std::endl;

                        
                    }

                    
                    Print = false;

                    
                }
                
                else if ((char)toupper(Des) == 'N')
                {

                
                    Print = false;

                    
                }
                
                else
                {

                
                    std::cout << "Wrong input" << std::endl;

                    
                }

                break;

            }

         }

         ENTER();

         break;


         case 3:
         {

             system("CLS");
             char Des;
             double LimitValue = 0;

             std::cout << "Do you want to at a limit value:[Y]/[N]" << std::endl;
             std::cin >> Des;

              // detta är för att lägga till ett gränsvärde
             if ((char)toupper(Des) == 'Y')
             {

                 std::string LimitValueString = "What is the imit value: ";
                 std::cout << LimitValueString << std::endl;
                 
                 LimitValue = NumberChoice(LimitValueString);

             }
             

            //if else beroende på om du har en value eller flera values
            if (size(DataEntries) == 1)
            {

            
                std::cout << "You have " << size(DataEntries) << " value" << std::endl;

                
                double SumVal = SummOfList(DataEntries);

                
                std::cout << "The only value is " << SumVal << std::endl;

                
            }

            else if (size(DataEntries) > 1)
            {

            
                std::cout << "You have " << size(DataEntries) << " values" << std::endl;


                //function för att summrera all data
                double SumVal = SummOfList(DataEntries);

                std::cout << "The sum of all the values is " << SumVal << std::endl;


                // medelvärdet är summan av alla delat på hur många values du har
                std::cout << "Avarage of all values " << SumVal / size(DataEntries) << std::endl;


                // här får jag maximum valuen och minimum valuen så att koden har en refrence att comparea mot
                double MinVal = std::numeric_limits<double>::max();
                double MaxVal = std::numeric_limits<double>::min();

                
                std::string TimeMax = "";
                std::string NumbMax = "";

                
                //detta frå fram max value
                
                for (const auto& VecVal : DataEntries)//checkar genom listan alla vectorer
                {
                
                    double temp = stod(VecVal[1]);
                    
                    //gör [1] för att det är på den indexen som data valuen är på
                    
                    if (temp > MaxVal)
                    {

                    
                        TimeMax = VecVal[0];
                        
                        NumbMax = VecVal[2];
                        
                        MaxVal = temp;

                        
                    }

                    
                }

                
                std::string TimeMin = "";
                std::string NumbMin = "";

                
                // detta får fram minsta value
                
                for (const auto& VecVal : DataEntries)
                {
                
                    double temp = stod(VecVal[1]);
                    
                    if (temp < MinVal)
                    
                    {

                    
                        TimeMin = VecVal[0];
                        
                        NumbMin = VecVal[2];
                        
                        MinVal = temp;

                        
                    }

                    
                }

                
                std::cout << "Min: \n" << TimeMin << NumbMin << "\n" << MinVal << "\n" << std::endl;
                std::cout << "Max: \n" << TimeMax << NumbMax << "\n" << MaxVal << "\n" << std::endl;


                double Varians = Varia(DataEntries);
                std::cout << "The sample varians is " << Varians / (size(DataEntries) - 1) << std::endl;
                std::cout << "The population varians is " << Varians / size(DataEntries) << std::endl;


                int TimesOver = 0;
                int TimesUnder = 0;

                if ((char)toupper(Des) == 'Y')
                {
                   
                    // denna for loop checkar alla gånger datan är under eller över gränsvärdet man la till
                        for (const auto& vec : DataEntries)
                        {
                            double temp = stod(vec[1]);
                           
                            if (temp < LimitValue)
                            {
                                
                                TimesUnder++;

                            }
                            else if (temp > LimitValue)
                            {
                               
                                TimesOver++;
                               
                            }
                        }

                        std::cout << "this is how many times you were over the limit value [" << TimesOver << "]" << std::endl;
                        std::cout << "this is how many times you were under the limit value [" << TimesUnder << "]" << std::endl;
               
                }


                
            }

            //detta kommer upp om du inte har några values fast försöker printa ut en lista endå
            else
            {

                std::cout << "You currently dont have any data values to look at" << std::endl;

            }
               
         }

         ENTER();

         break;


         case 4:
         {

             system("CLS");

             std::string TimesSimulate = "How many values do you want to simulate";
             std::cout << TimesSimulate << std::endl;

             int Times = NumberChoice(TimesSimulate);

             for (int i = 0; i < Times; i++)
             {

                 //vector för värdet med storlek (3) så jag kan ha tid när den skapades nummer# vilken årdning den skapades och till sist valuen av datan
                 std::vector<std::string> Values(3);

                 std::cout << "[" << i + 1 << "]" << "Value: ";

                 //här är för att lägga till tiden
                 time_t TimeStamp;
                 time(&TimeStamp);
                 Values[0] = ctime(&TimeStamp);


                 //detta är för att ge nummeret på vilken värde det är
                 std::string convert = std::to_string((size(DataEntries) + 1));
                 std::string dataLabel = convert + "#";
                 std::cout << dataLabel << std::endl;
                 Values[2] = dataLabel;


                
                 double f = (double)rand() / RAND_MAX;
                 double RandValue = 20 + f * (30 - 20);
                 std::string TempString = std::to_string(RandValue);
                 std::cout << TempString << std::endl;
                 Values[1] = TempString;

                 DataEntries.push_back(Values);

             }

         }

         ENTER();

         break;


         case 5:
         {

         
             std::cout << "test" << std::endl;

            
         }

         break;


         case 6: //stänger av loopen
         
             run = false;

             break;

            
         default: //om du skriver ett nummer som inte är en av alternativen   
         {

             std::cout << "Wrong input choices are between [1]-[6]" << std::endl;
            
         }
         
         break;


        }

    }

    ENTER();
    return 0;

}

